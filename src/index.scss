@use "~@nodestrap/sass-selector/src/index" as selector;
@use "~@nodestrap/sass-string/src/index"   as string;



/// Combines two pars into single one, separated by hypen (-).
/// @param {string} $part-a first part to combine.
/// @param {string} $part-b second part to combine.
/// @return {string} combined partA-partB.
@function part-combine($part-a, $part-b) {
    @if (string.not-empty($part-a)) {
        @if (string.not-empty($part-b)) {
            @return "#{$part-a}-#{$part-b}";
        }
        @else {
            @return $part-a;
        }
    }
    @else {
        @if (string.not-empty($part-b)) {
            @return $part-b;
        }
        @else {
            @return "";
        }
    }
}

/// Creates a prefix of css variable based on the specified prefix.
/// @param {string} $var-prefix the prefix to be applied to css variable.
/// @param {string} $var-prefix-base the base prefix to be applied to css variable.
/// @return {string} a prefix of css variable.
@function make-var($var-prefix, $var-prefix-base) {
    $var-prefix-comb     : part-combine($var-prefix-base, $var-prefix);

    @if (string.not-empty($var-prefix-comb)) {
        @return "--#{$var-prefix-comb}-";
    }
    @else {
        @return "--";
    }
}



/// Declares css variable on the html page.
/// @param {string} $var-root the location of the css variable to declare.
@mixin declare-vars($var-root) {
    @if (string.not-empty($var-root)) { @include selector.is($var-root) {
        @content;
    }}
}



/// Declares the class selector to the css.
/// @param {string} $class the name of the module's class -or- "" -or- null.
/// @param {string} $base the name of the module's class' base -or- "" -or- null.
@mixin class($class: "", $base: "") {
    @if (string.not-empty($base) or string.not-empty($class)) {

        @if (string.not-empty($base)) { @include selector.is($base) {
            @include selector.append($class) {
                @content;
            }
        }}
        @else {
            @include selector.is($class) {
                @content;
            }
        }
    }
}